---
import { Icon } from 'astro-icon/components';

import Button from "../Button.astro";
import Modal from '../Modal.astro';
import CustomerForm from '../CustomerForm.astro';

interface Props {
	links: {
		label: string;
		href: string;
		active?: boolean;
	}[];
}

const { links } = Astro.props;
---

<header class="main-header">
	<div class="container">
		<nav class="navbar">
			<a href="/rosmebeli/" class="navbar__logo" aria-label="Переход на главную страницу"><Icon name="logo" /></a>
			<Button appearance="ghost" id="navbar-toggler">
				<Icon name="menu" />
				<Icon name="x" />
			</Button>
			<div class="navbar-collapse">
				<ul class="navbar-nav">
					{links.map((link) => (
						<li class="navbar-nav__item"><a
							href={link.href}
							class:list={[
								{"active": link.active},
							]}
						>{link.label}</a></li>
					))}
				</ul>
				<div class="navbar-promo">
					<a href="tel:+7 (967) 128-02-00">+7&nbsp;(967)&nbsp;128&#8209;02&#8209;00</a>
					<Modal id="header-modal" data-theme="light">
						<Button
							appearance="ghost"
							slot="trigger"
							onclick="openDialog('header-modal')"
						>Вызвать&nbsp;замерщика</Button>
						<CustomerForm id="header-form" method="dialog" theme="light"/>
					</Modal>
				</div>
			</div>
		</nav>
	</div>
</header>

{/*
	Скрипт открытия/закрытия навигационной панели
*/}
<script>
	const toggler = document.getElementById("navbar-toggler") as HTMLElement | null;

	const toggleExpanded = () => {
		if (!toggler) return;
		toggler.classList.toggle("toggled");
	}

	const isExpanded = () => {
		if (!toggler) return Error("navigation toggler not found");
		return toggler.classList.contains("toggled");
	}

	// Открываем/закрываем навигацию при нажатии на кнопку
	toggler?.addEventListener("click", () => toggleExpanded());

	// Закрываем навигацию при клике вне ее области
	window.addEventListener("click", (event) => {
		if (isExpanded() && event.target instanceof Node && !toggler?.contains(event.target)) {
			toggleExpanded()
		}
	});

	// Закрываем навигацию при клике на Esc
	window.addEventListener("keydown", (event) => {
		if (isExpanded() && event.key === "Escape") {
			toggleExpanded();
		}
	})
</script>

{/*
	Скрипт для добавления/удаления класса .scrolled при скролле
*/}
<script>
	const header = document.querySelector(".main-header");

	window.addEventListener("scroll", () => {
		window.scrollY > 0
			? header?.classList.add("scrolled")
			: header?.classList.remove("scrolled");
	});
</script>

{/*
	Скрипт для добавления/удаления класса .active при скролле
	для якорных ссылок
*/}
<script>
	const links = document.querySelectorAll(".navbar-nav__item a") as NodeListOf<HTMLAnchorElement>;
	const anchorLinks = [] as Array<HTMLAnchorElement>;

	links.forEach((link) => {
		if (link.hash) anchorLinks.push(link);
	});

	const sections = document.querySelectorAll("section") as NodeListOf<HTMLElement>;
	const sectionsWithId = Array.from(sections).filter((section) => section.id);

	window.addEventListener("scroll", () => {
		sectionsWithId.forEach((section) => {
			if (window.scrollY + window.innerHeight / 2 >= section.offsetTop) {
				anchorLinks.forEach((link) => {
					if (section.id === link.hash.replace("#", "")) {
						link.classList.add("active");
					} else {
						link.classList.remove("active");
					}
				});
			}
		})
	});
</script>

{/*
	Скрипт для добавления класса .light при использовании светлой темы в "body > main"
*/}
<script>
	const header = document.querySelector(".main-header");

	const bodyMain = document.querySelector("body > main") as HTMLElement;
	const isLightTheme = bodyMain.dataset.theme === "light";

	if (header && isLightTheme) {
		header.classList.add("light");
	}
</script>

<style lang="scss">
	@import "../../styles/_breakpoints.scss";

	.main-header {
		--main-header-color: var(--clr-100);
		--main-header-bg-color: var(--clr-primary-700);

		position: fixed;
		z-index: 9001;

		width: 100%;
		height: 0;

		color: var(--main-header-color);

		.container::before {
			content: "";

			position: absolute;
			z-index: -1;
			inset: 0;

			width: 100%;
			height:0;

			transition: height 0.2s ease-in-out;
		}

		&.scrolled {
			.container::before {
				height: var(--main-header-height);
				background-color: color-mix(in srgb, var(--main-header-bg-color) 95%, transparent);
				box-shadow: 0 4px 4px -2px rgb(24 39 75 / 8%), 0 2px 4px -2px rgb(24 39 75 / 12%);
			}
		}

		&.light {
			--main-header-color: var(--clr-900);
			--main-header-bg-color: var(--clr-100);
			--accent-color: var(--clr-secondary-700);
		}
	}

	.navbar {
		display: grid;
		grid-template-areas:
			"logo toggler"
			"nav nav";
		grid-template-columns: 1fr auto;
		grid-template-rows: var(--main-header-height, min-content) 0fr;

		width: 100%;

		transition: grid-template-rows 300ms;

		@include breakpoint(xl) {
			grid-template-areas:
				"logo nav";
			grid-template-columns: auto 1fr;
		}

		&__logo {
			display: flex;
			grid-area: logo;
			align-items: center;

			margin: auto auto auto 0;


			font-size: 2.5rem;
			color: currentcolor;

			&:active {
				color: var(--clr-pastel-red);
			}
		}

		&-collapse {
			overflow: hidden;
			display: flex;
			grid-area: nav;
			flex-direction: column;

			font-size: 1.5rem;

			&::before {
				content: "";

				position: absolute;
				z-index: -100;
				inset: 0;

				width: 100%;
				height: 0;

				background: color-mix(in srgb, var(--main-header-bg-color) 95%, transparent);

				transition: height 0.2s ease-in-out;
			}

			@include breakpoint(xl) {
				flex-direction: row;
				align-items: center;
				justify-content: flex-end;

				font-size: 1rem;

				background-color: transparent;
			}
		}

		&-nav {
			display: flex;
			flex-direction: column;
			gap: 0.25rem;
			justify-content: center;

			margin: 0;
			padding: 0 clamp(0.5rem, 1vw, 2rem);

			list-style: none;

			&__item {
				display: flex;

				& a {
					flex-basis: 100%;

					box-sizing: border-box;
					padding: 1rem 1.5rem;

					color: currentcolor;
					text-decoration: none;
					letter-spacing: 0.02em;

					border-bottom: none;
					border-left: 3px solid transparent;

					transition: border-color 0.2s ease;

					&.active {
						font-weight: bold;
						border-bottom: none;
						border-left: 3px solid var(--accent-color);
					}

					&:hover {
						color: var(--accent-color);
					}

					&:active {
						color: var(--clr-pastel-red);
					}
				}
			}

			@include breakpoint(xl) {
				flex-direction: row;
				justify-content: flex-end;
				background-color: transparent;

				&__item {
					& a {
						padding: 0.25rem 1rem;
						border-bottom: 3px solid transparent;
						border-left: none;

						&.active {
							border-bottom: 3px solid var(--accent-color);
							border-left: none;
						}
					}
				}
			}
		}

		&-promo {
			display: flex;
			flex-direction: column;
			gap: 1.25rem;
			align-items: center;

			padding: 1rem 1.5rem;

			a[href^="tel"] {
				font-weight: bold;
				color: currentcolor;

				&:hover {
					color: var(--accent-color);
				}
			}

			#header-form {
				font-size: 1rem;
			}

			@include breakpoint(xl) {
				flex-direction: row;
				gap: 1.25rem;
				align-items: center;
				padding: 0;
			}
		}

		&:has(.toggled) {
			grid-template-rows: var(--main-header-height, min-content) 1fr;

			& .navbar-collapse::before {
				height: 100vh;
			}
		}
	}

	#navbar-toggler {
		display: block;
		grid-area: toggler;
		align-self: center;

		aspect-ratio: 1;
		min-width: auto;
		padding: 0.875rem;

		& [data-icon] {
			scale: 1.5;
		}

		& [data-icon="x"] {
			display: none;
		}

		& [data-icon="menu"] {
			display: block;
		}

		&.toggled {
			& [data-icon="x"] {
				display: block;
			}

			& [data-icon="menu"] {
				display: none;
			}
		}

		@include breakpoint(xl) {
			display: none;
		}
	}
</style>