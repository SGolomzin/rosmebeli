---
import { Icon } from 'astro-icon/components';
import Statistics from '../Statistics.astro';
import type { StatisticsProps } from '../Statistics.astro';

import { baseUrl } from '../../helpers/helpers';

import Button from "../Button.astro";
import Modal from '../Modal.astro';
import CustomerForm from '../CustomerForm.astro';

const Stats: StatisticsProps[] = [
	{
		value: "14 лет",
		description: "успешной работы"
	},
	{
		value: "2,500+",
		description: "довольных клиентов"
	},
	{
		value: "36",
		description: "месяцев гарантии"
	}
]
---
<section id="hero" class="section-block">
	<video
		class="hero__video"
		autoplay
		loop
		muted
		playsinline
		aria-hidden="true"
		role="presentation"
	>
		<source data-src={baseUrl("video/carpentry.mp4")} type="video/mp4">
	</video>

	<div class="container">
		<div class="hero__promo">
			<div>
				<p class="hero__promo-text label">Качественная мебель на заказ · Изготавливаем в Москве и Московской области</p>
				<h1 class="hero__promo-slogan">Производство мебели по индивидуальным проектам</h1>
				<span class="hero__promo-sub-text pseudo-h4">Помогаем в создании идеальной мебели для вашего дома</span>
				<Modal id="hero-modal" data-theme="light">
					<Button
						class="hero__promo-button"
						slot="trigger"
						appearance="ghost"
						onclick="openDialog('hero-modal')"
					>Заказать обратный звонок</Button>
					<CustomerForm id="hero-form" method="dialog"/>
					<span class="label" slot="title">Заказать обратный звонок</span>
				</Modal>
				<Statistics class="hero__promo-stats" stats={Stats} />
			</div>
		</div>
	</div>

	<Button appearance="ghost" id="video-control" aria-label="Кнопка паузы/воспроизвдения видео">
		<Icon name="play" aria-labelledby="video-control" />
		<Icon name="pause" aria-labelledby="video-control" />
	</Button>
</section>

{/* Lazy load video */}
<script>
	const lazyLoad = () => {
		const video = document.querySelector(".hero__video") as HTMLVideoElement;
		const videoSources = [...video.children] as HTMLSourceElement[];

		for (const source of videoSources) {
			if (typeof source.tagName === "string" && source.tagName === "SOURCE") {
				source.src = source.dataset.src || "";
			}
		}

		video.load();
	}

	document.addEventListener("DOMContentLoaded", lazyLoad);
</script>

{/*
	Скрипт паузы/воспроизведения видео
*/}
<script>
	const videoControl = document.getElementById("video-control") as HTMLButtonElement;
	const video = document.querySelector(".hero__video") as HTMLVideoElement;

	const toggleVideoPlayback = () => {
		if (!videoControl || !video) return;
		const isPaused = videoControl.classList.contains("paused");
		video[isPaused ? "play" : "pause"]();
		videoControl.classList.toggle("paused");
	}

	videoControl?.addEventListener("click", () => toggleVideoPlayback());
</script>

{/* GSAP animations */}
<script>
	const tl = gsap.timeline({ defaults:{ opacity: 0, ease: "back" }});
	function init() {
		tl.from(".hero__promo", { ease: "linear", autoAlpha: 0 })
			.from(".hero__promo-slogan", { x: 80, duration: 1 })
			.from(".hero__promo-sub-text", { x: -80, duration:1 }, "<")
			.from(".hero__promo-text", { y: 30 }, "-=0.2")
			.from(".hero__promo-button", { y: 50 }, "-=0.4")
			.from(".hero__promo-stats > *", { y: 50, stagger: 0.2 }, "-=0.4");

		gsap.from(".hero__video", { ease: "linear", autoAlpha: 0, duration: 1 });
	}

	window.addEventListener("load", init);
</script>

<style lang="scss">
	@import "../../styles/_breakpoints.scss";
	@import "../../styles/_design.scss";

	section {
		position: relative;
		overflow: hidden;
		place-content: center;
		min-height: calc(100vh - var(--section-top-padding) - var(--section-bottom-padding));
	}

	.container {
		display: grid;
		grid-template-columns: repeat(12, 1fr);
		grid-template-rows: 1fr;
		gap: 1.25rem;
	}

	.hero__video {
		position: absolute;
		z-index: -1;
		top: 0;

		width: 100%;
		min-width: 320px;
		min-height: 100%;

		object-fit: cover;
		filter: grayscale(65%) opacity(0.3);

		@include initialHidden();
	}

	#video-control {
		position: absolute;
		z-index: 2;
		right: 1rem;
		bottom: 1rem;

		min-width: auto;
		padding: 0.875rem;

		[data-icon="play"] {
			display: none;
		}

		[data-icon="pause"] {
			display: block;
		}

		&.paused {
			[data-icon="pause"] {
				display: none;
			}

			[data-icon="play"] {
				display: block;
			}
		}
	}

	.hero__promo {
		z-index: 1;
		grid-column: 1 / -1;
		grid-row: 1 / 2;
		align-self: center;

		&-text {
			color: var(--clr-secondary-400);
		}

		&-slogan {
			margin: 15px 0 20px;

			font-weight: 800;
			line-height: 1.12;
			text-transform: uppercase;
			letter-spacing: 0.02em;
			overflow-wrap: break-word;
		}

		&-sub-text {
			color: var(--clr-400);
		}

		@include initialHidden();

		@include breakpoint(xl) {
			grid-column: 1 / span 8;
			grid-row: 1 / span 1;
		}
	}
</style>