---
interface Props extends astroHTML.JSX.HTMLAttributes {
	theme?: "dark" | "light";
	links: {
		label: string;
		href: string;
		active?: boolean;
	}[];
}

const { theme = "dark", links, ...rest } = Astro.props;
---

<nav aria-label="Навигация на этой странице" {...rest}>
	<ul class:list={["nav", `nav--${theme}`]}>
		{
			links.map((link) => (
				<li class:list={["nav-link", { "nav-link--active": link.active }] }>
					<a href={link.href}>
						{link.label}
					</a>
				</li>
			))
		}
	</ul>
</nav>

<script>
	const links = document.querySelectorAll(".nav-link");

	links.forEach((link) => {
		link.addEventListener("click", () => {
			links.forEach((l) => l.classList.remove("nav-link--active"));
			link.classList.add("nav-link--active");
		})
	})
</script>

<style lang="scss">
	@import "../styles/_breakpoints.scss";

	.nav {
		display: flex;
		flex-direction: column;
		gap: 1.25rem;
		justify-content: flex-end;

		margin: 0;
		padding: 0 clamp(0.5rem, 1vw, 2rem);

		&-link {
			display: flex;
			flex: 1 0 auto;
			box-sizing: border-box;
			list-style: none;

			&--active {
				font-weight: 700;
			}

			a {
				display: flex;
				flex: 1;
				align-items: center;

				padding: 1rem 1.5rem;

				font-size: 1.5rem;
				color: currentcolor;
				text-decoration: none;
				letter-spacing: 0.02em;

				&:hover {
					color: var(--clr-secondary-400);
				}
			}
		}

		@include breakpoint(xl) {
			display: flex;
			flex-direction: row;
			gap: 0.5rem;
			background-color: transparent;

			&-link {
				&--active {
					border-bottom: 3px solid var(--clr-secondary-400);
				}

				a {
					padding: 0.25rem 1rem;
					font-size: 1rem;
				}
			}
		}
	}
</style>