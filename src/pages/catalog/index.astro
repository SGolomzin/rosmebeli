---
import Layout from "../../layouts/BaseLayout.astro"
import { getCollection } from "astro:content";

import Breadcrumbs from "../../components/Breadcrumbs.astro";
import CatalogCard from "../../components/CatalogCard.astro";

const allProducts = await getCollection("catalog");
const categories = [...new Set(allProducts.map((product) => product.data.category))];
---

<Layout title="Каталог | РОСМЕБЕЛЬ">
	<main>
		<section class="section-block">
			<div class="container">
				<Breadcrumbs />
				<h1>Каталог</h1>
				<div class="catalog">
					<div class="catalog__filter label">
						<p>Фильтр по категориям:</p>
						{categories.map((category) => (
							<div class="filter-input">
								<input type="checkbox" id={category} name={category} checked/>
								<label for={category}>{category}</label>
							</div>
						))}
					</div>

					<div class="catalog-list">
						{allProducts.map((product) => (
							<div
								class="catalog-list__item"
								data-category={product.data.category}
							>
								<CatalogCard product={product} />
							</div>
						))}
					</div>
				</div>
		</section>
	</main>
</Layout>

{/*
	Обновляем ScrollTrigger при изменении фильтров
	так как меняется размер страницы, меняются и изначальные координаты запуска анимаций
	(в данном случае анимации футера), во избежание этого нужно обновлять ScrollTrigger
*/}
<script>
	const filterInputs = document.querySelectorAll(".catalog__filter .filter-input input");

	filterInputs.forEach((input) => {
		input.addEventListener("change", () => {
			ScrollTrigger.refresh();
		});
	});
</script>

<style lang="scss">
	@import "../../styles/_breakpoints.scss";

	$categories: 'Кухни', 'Шкафы', 'Стенки', 'Детские', 'Прихожие', 'Обеденные', "Рабочие зоны", "Мебель для ванной";

	h1 {
		margin-bottom: 1rem;
	}

	.catalog {
		display: flex;
		flex-direction: column;
		gap: 1.25rem;

		&__filter {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
			margin-bottom: 1.25rem;
		}

		&-list {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			gap: 1.25rem;

			@include breakpoint(md) {
				grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
			}

			@include breakpoint(lg) {
				grid-template-columns: repeat(auto-fill, minmax(425px, 1fr));
			}
		}

		@each $category in $categories {
			&:has(input[name="#{$category}"]:checked) {
				.catalog-list__item[data-category="#{$category}"] {
					display: block;
				}
			}

			&:has(input[name="#{$category}"]:not(:checked)) {
				.catalog-list__item[data-category="#{$category}"] {
					display: none;
				}
			}
		}
	}

	.filter-input {
		display: flex;
		gap: 0.5rem;
		align-items: center;
		accent-color: var(--accent-color);
	}
</style>